name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-all:
    name: Build for all platforms
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0"

      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      # Build for each platform including ARM64
      - name: Build Windows x64
        run: dotnet publish BuckshotPlusPlus -c Release -r win-x64 --self-contained true /p:PublishSingleFile=false

      - name: Build Linux x64
        run: dotnet publish BuckshotPlusPlus -c Release -r linux-x64 --self-contained true /p:PublishSingleFile=false

      - name: Build Linux ARM64
        run: dotnet publish BuckshotPlusPlus -c Release -r linux-arm64 --self-contained true /p:PublishSingleFile=false

      - name: Build macOS x64
        run: dotnet publish BuckshotPlusPlus -c Release -r osx-x64 --self-contained true /p:PublishSingleFile=false

      - name: Build macOS ARM64
        run: dotnet publish BuckshotPlusPlus -c Release -r osx-arm64 --self-contained true /p:PublishSingleFile=false

      # Create release assets including ARM64 builds
      - name: Create GitHub Release Assets
        run: |
          # Create release asset directories
          mkdir -p release-assets/win32-x64
          mkdir -p release-assets/linux-x64
          mkdir -p release-assets/linux-arm64
          mkdir -p release-assets/darwin-x64
          mkdir -p release-assets/darwin-arm64

          # Copy binaries to release asset directories
          cp -r BuckshotPlusPlus/bin/Release/net9.0/win-x64/publish/* release-assets/win32-x64/
          cp -r BuckshotPlusPlus/bin/Release/net9.0/linux-x64/publish/* release-assets/linux-x64/
          cp -r BuckshotPlusPlus/bin/Release/net9.0/linux-arm64/publish/* release-assets/linux-arm64/
          cp -r BuckshotPlusPlus/bin/Release/net9.0/osx-x64/publish/* release-assets/darwin-x64/
          cp -r BuckshotPlusPlus/bin/Release/net9.0/osx-arm64/publish/* release-assets/darwin-arm64/

          # Create ZIP files for each platform
          cd release-assets
          zip -r ../windows-x64.zip win32-x64/*
          zip -r ../linux-x64.zip linux-x64/*
          zip -r ../linux-arm64.zip linux-arm64/*
          zip -r ../macos-x64.zip darwin-x64/*
          zip -r ../macos-arm64.zip darwin-arm64/*
          cd ..

      # Create npm package structure (without binaries)
      - name: Create npm package structure
        run: |
          mkdir -p bpp/bin
          mkdir -p bpp/scripts
          mkdir -p bpp/lib/binaries

      # Create README.md first so it's included in the package
      - name: Create README
        run: |
          cat > bpp/README.md << 'EOL'
          # BuckshotPlusPlus

          BuckshotPlusPlus is a simple and efficient web development language that makes creating websites easy and intuitive.

          ## Installation

          ```bash
          npm install -g buckshotplusplus
          ```

          ## Quick Start

          1. Create a new file `main.bpp`:

          ```lua
          view Title {
            content = "Hello World!"
            type = "h1"
            color = "blue"
          }

          view Home {
            type = "body"
            margin = "0"
            padding = "0"
            content = Title
          }

          page index {
            title = "Home!"
            body = Home
          }
          ```

          2. Run your BuckshotPlusPlus server:

          ```bash
          bpp main.bpp
          ```

          3. Visit `http://localhost:8080` in your browser to see your website.

          ## Features

          - Simple and intuitive syntax
          - Hot reloading for development
          - Built-in server
          - CSS-like styling
          - Component-based architecture

          ## Requirements

          - Node.js 12 or higher
          - x64 or ARM64 architecture

          ## Example Projects

          For more examples and starter projects, visit our [official website](https://bpplang.com).

          ## Documentation

          For full documentation, visit [our documentation](https://doc.bbplang.com).

          ## Contributing

          Contributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.

          ## License

          [MIT](https://github.com/BuckshotPlusPlus/BuckshotPlusPlus/blob/main/LICENSE)

          ## Support

          If you encounter any problems or have questions, please [open an issue](https://github.com/BuckshotPlusPlus/BuckshotPlusPlus/issues).
          EOL

      # Create package.json with version from git tag
      - name: Create package.json
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          cat > bpp/package.json << EOL
          {
            "name": "buckshotplusplus",
            "version": "$VERSION",
            "description": "BuckshotPlusPlus - A simple and efficient web development language",
            "main": "bin/bpp.js",
            "bin": {
              "bpp": "./bin/bpp.js"
            },
            "scripts": {
              "postinstall": "node scripts/install.js"
            },
            "dependencies": {
              "node-stream-zip": "^1.15.0"
            },
            "keywords": [
              "buckshot",
              "buckshotplusplus",
              "bpp",
              "web",
              "development",
              "language"
            ],
            "author": "Vic92548",
            "license": "MIT",
            "repository": {
              "type": "git",
              "url": "https://github.com/BuckshotPlusPlus/BuckshotPlusPlus.git"
            },
            "homepage": "https://github.com/BuckshotPlusPlus/BuckshotPlusPlus#readme",
            "os": ["win32", "linux", "darwin"],
            "cpu": ["x64", "arm64"],
            "engines": {
              "node": ">=12.0.0"
            }
          }
          EOL

      # Create CLI files
      - name: Create CLI files
        run: |
          # Create bpp.js
          cat > bpp/bin/bpp.js << 'EOL'
          #!/usr/bin/env node
          const path = require('path');
          const { spawn } = require('child_process');
          const os = require('os');
          const fs = require('fs');

          const platform = os.platform();
          const arch = os.arch();

          const getBinaryDir = () => {
              const platformDir = `${platform}-${arch}`;
              return path.join(__dirname, '..', 'lib', 'binaries', platformDir, platformDir);
          };

          const binaryDir = getBinaryDir();
          const binaryName = platform === 'win32' ? 'BuckshotPlusPlus.exe' : 'BuckshotPlusPlus';
          const binaryPath = path.join(binaryDir, binaryName);

          // Check if the binary exists
          if (!fs.existsSync(binaryPath)) {
              console.error(`Error: Binary not found at ${binaryPath}`);
              process.exit(1);
          }

          const args = process.argv.slice(2).map(arg => {
              // If the argument looks like a file path, convert it to absolute
              if (arg.endsWith('.bpp')) {
                  const absolutePath = path.resolve(process.cwd(), arg);
                  if (!fs.existsSync(absolutePath)) {
                      console.error(`Error: File not found: ${arg}`);
                      process.exit(1);
                  }
                  return absolutePath;
              }
              return arg;
          });

          const bppProcess = spawn(binaryPath, args, {
              stdio: 'inherit',
              cwd: process.cwd()
          });

          bppProcess.on('error', (err) => {
              console.error(`Failed to start BuckshotPlusPlus: ${err.message}`);
              process.exit(1);
          });

          bppProcess.on('exit', (code) => {
              process.exit(code);
          });
          EOL

          chmod +x bpp/bin/bpp.js

          # Create install.js
          cat > bpp/scripts/install.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          const os = require('os');
          const https = require('https');
          const StreamZip = require('node-stream-zip');

          const platform = os.platform();
          const arch = os.arch();
          const version = process.env.npm_package_version;

          const getBinaryInfo = () => {
            const platformMap = {
              'win32-x64': 'windows-x64',
              'win32-arm64': 'windows-arm64',
              'linux-x64': 'linux-x64',
              'linux-arm64': 'linux-arm64',
              'darwin-x64': 'macos-x64',
              'darwin-arm64': 'macos-arm64'
            };

            const platformKey = `${platform}-${arch}`;
            const assetName = platformMap[platformKey];

            if (!assetName) {
              throw new Error(`Unsupported platform: ${platformKey}`);
            }

            return {
              url: `https://github.com/BuckshotPlusPlus/BuckshotPlusPlus/releases/download/v${version}/${assetName}.zip`,
              binaryName: platform === 'win32' ? 'BuckshotPlusPlus.exe' : 'BuckshotPlusPlus'
            };
          };

          const downloadWithRetry = (url, destPath, retries = 3) => {
            return new Promise((resolve, reject) => {
              const tryDownload = (attemptsLeft) => {
                const file = fs.createWriteStream(destPath);
                
                https.get(url, (response) => {
                  if (response.statusCode === 302 || response.statusCode === 301) {
                    // Handle redirect
                    https.get(response.headers.location, (redirectedResponse) => {
                      if (redirectedResponse.statusCode !== 200) {
                        if (attemptsLeft > 0) {
                          console.log(`Retrying download... ${attemptsLeft} attempts left`);
                          tryDownload(attemptsLeft - 1);
                        } else {
                          reject(new Error(`Failed to download after ${retries} attempts`));
                        }
                        return;
                      }
                      redirectedResponse.pipe(file);
                      file.on('finish', () => {
                        file.close();
                        resolve();
                      });
                    }).on('error', (err) => {
                      if (attemptsLeft > 0) {
                        console.log(`Retrying download... ${attemptsLeft} attempts left`);
                        tryDownload(attemptsLeft - 1);
                      } else {
                        reject(err);
                      }
                    });
                  } else if (response.statusCode !== 200) {
                    if (attemptsLeft > 0) {
                      console.log(`Retrying download... ${attemptsLeft} attempts left`);
                      tryDownload(attemptsLeft - 1);
                    } else {
                      reject(new Error(`Failed to download: ${response.statusCode}`));
                    }
                    return;
                  } else {
                    response.pipe(file);
                    file.on('finish', () => {
                      file.close();
                      resolve();
                    });
                  }
                }).on('error', (err) => {
                  if (attemptsLeft > 0) {
                    console.log(`Retrying download... ${attemptsLeft} attempts left`);
                    tryDownload(attemptsLeft - 1);
                  } else {
                    reject(err);
                  }
                });
              };

              tryDownload(retries);
            });
          };

          const extractZip = async (zipPath, destDir) => {
            const zip = new StreamZip.async({ file: zipPath });
            await zip.extract(null, destDir);
            await zip.close();
          };

          const main = async () => {
            try {
              const { url, binaryName } = getBinaryInfo();
              const binaryDir = path.join(__dirname, '..', 'lib', 'binaries', `${platform}-${arch}`);
              const zipPath = path.join(binaryDir, 'temp.zip');

              // Create directories
              fs.mkdirSync(binaryDir, { recursive: true });

              // Download and extract binary
              console.log(`Downloading binary from GitHub releases: ${url}`);
              await downloadWithRetry(url, zipPath);
              
              console.log('Extracting binary...');
              await extractZip(zipPath, binaryDir);

              // Cleanup
              fs.unlinkSync(zipPath);

              // Set executable permissions on Unix-like systems
              if (platform !== 'win32') {
                const binaryPath = path.join(binaryDir, binaryName);
                fs.chmodSync(binaryPath, '755');
                console.log('Set executable permissions');
              }

              console.log('Installation completed successfully');
            } catch (error) {
              console.error('Installation failed:', error);
              process.exit(1);
            }
          };

          main();
          EOL

      # Upload all release assets
      - name: Upload Windows x64 Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: windows-x64.zip
          tag: ${{ github.ref }}

      - name: Upload Linux x64 Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: linux-x64.zip
          tag: ${{ github.ref }}

      - name: Upload Linux ARM64 Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: linux-arm64.zip
          tag: ${{ github.ref }}

      - name: Upload macOS x64 Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: macos-x64.zip
          tag: ${{ github.ref }}

      - name: Upload macOS ARM64 Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: macos-arm64.zip
          asset_name: macos-arm64.zip
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  build-and-push-docker:
    name: Build and Push Docker Image
    needs: build-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: vic92548/buckshotplusplus
          tags: |
            type=raw,value=latest
            type=ref,event=tag

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./BuckshotPlusPlus
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Publish to npm
  - name: Publish to npm
    run: |
      cd bpp
      npm publish
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
